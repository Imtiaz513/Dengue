.default = NA_real_)
data$insensitive_work<- recode(data$insensitive_work,
!!!likert_mapping,
.default = NA_real_)
data$uncaring_job<- recode(data$uncaring_job,
!!!likert_mapping,
.default = NA_real_)
####################################################
names(data)
#######constructs measurement Emotional_Exhaustion
# Ensure the variables are numeric
data$Emotional_Exhaustion <- rowSums(data[, c("emotional_drain", "effort_work",
"work_break", "frustrated_work",
"work_hard", "stress_contact",
"end_rope")], na.rm = TRUE)
# Ensure the variables are numeric and calculate row-wise sum. (Personal_Accomplishment)
data$Personal_Accomplishment <- rowSums(data[, c("worthwhile", "full_energy",
"understand_patients",
"effective_problem",
"calm_emotions",
"positive_influence",
"relaxed_atmosphere",
"refreshed_work")], na.rm = TRUE)
# Ensure the variables are numeric and calculate row-wise sum
data$Depersonalization <- rowSums(data[, c("objectify_patients", "tired_morning",
"responsible_problems", "end_patience",
"careless_patients", "insensitive_work",
"uncaring_job")], na.rm = TRUE)
# Ensure the variables are numeric and calculate row-wise sum
data$Stress <- rowSums(data[, c("relax", "dry_mouth", "no_positive",
"breath_difficulty", "low_initiative",
"overreact", "trembling")], na.rm = TRUE)
# Ensure the variables are numeric and calculate row-wise sum
data$Anxiety <- rowSums(data[, c("nervous_energy", "panic_worry",
"no_look_forward", "agitated",
"difficult_relax")], na.rm = TRUE)
# Ensure the variables are numeric and calculate row-wise sum
data$Depression <- rowSums(data[, c("downhearted", "intolerant", "close_panic",
"no_enthusiasm", "low_self_worth", "touchy",
"heart_sensation", "scared", "life_meaningless")], na.rm = TRUE)
data$EE_Level <- cut(data$Emotional_Exhaustion,
breaks = c(-Inf, 16, 26, Inf),
labels = c("Low", "Moderate", "High"))
data$PA_Level <- cut(data$Personal_Accomplishment,
breaks = c(-Inf, 31, 36, Inf),
labels = c("Low", "Moderate", "High"))
data$DP_Level <- cut(data$Depersonalization,
breaks = c(-Inf, 6, 12, Inf),
labels = c("Low", "Moderate", "High"))
##############################
# Convert specified variables to factors
data$age <- as.factor(data$age)
data$gender <- as.factor(data$gender)
data$work_hours <- as.factor(data$work_hours)
data$qualification <- as.factor(data$qualification)
data$dept <- as.factor(data$dept)
data$marital_status <- as.factor(data$marital_status)
data$location <- as.factor(data$location)
data$work_location <- as.factor(data$work_location)
data$dengue_cases <- as.factor(data$dengue_cases)
# Load the gtsummary package
library(gtsummary)
# Create a summary table for selected variables
summary_table <- data %>%
select(age, gender, work_hours, qualification, dept, marital_status, Emotional_Exhaustion, Personal_Accomplishment, Depersonalization) %>%
tbl_summary(
by = gender,  # Optional: Group the summary by gender
statistic = list(all_continuous() ~ "{mean} ({sd})",  # Display mean and standard deviation for continuous variables
all_categorical() ~ "{n} ({p}%)"),    # Display counts and percentages for categorical variables
missing = "ifany"                                     # Show missing data if present
) %>%
add_p()                                                # Add p-values for group comparisons (optional)
summary_table
# Create a basic summary table
simple_summary <- data %>%
select(age, gender, work_hours, qualification, dept, marital_status, Emotional_Exhaustion, Personal_Accomplishment, Depersonalization) %>%
tbl_summary(
statistic = list(all_continuous() ~ "{mean} ({sd})",  # Mean and standard deviation for continuous variables
all_categorical() ~ "{n} ({p}%)"),  # Counts and percentages for categorical variables
missing = "ifany"                                    # Show missing data if present
)
simple_summary
# Load necessary libraries
library(gtsummary)
library(dplyr)
# Calculate mean, SD, and confidence intervals for the selected variables
summary_data <- data %>%
summarise(
Emotional_Exhaustion_Mean = mean(Emotional_Exhaustion, na.rm = TRUE),
Emotional_Exhaustion_SD = sd(Emotional_Exhaustion, na.rm = TRUE),
Emotional_Exhaustion_CI_Low = mean(Emotional_Exhaustion, na.rm = TRUE) - 1.96 * sd(Emotional_Exhaustion, na.rm = TRUE) / sqrt(n()),
Emotional_Exhaustion_CI_High = mean(Emotional_Exhaustion, na.rm = TRUE) + 1.96 * sd(Emotional_Exhaustion, na.rm = TRUE) / sqrt(n()),
Personal_Accomplishment_Mean = mean(Personal_Accomplishment, na.rm = TRUE),
Personal_Accomplishment_SD = sd(Personal_Accomplishment, na.rm = TRUE),
Personal_Accomplishment_CI_Low = mean(Personal_Accomplishment, na.rm = TRUE) - 1.96 * sd(Personal_Accomplishment, na.rm = TRUE) / sqrt(n()),
Personal_Accomplishment_CI_High = mean(Personal_Accomplishment, na.rm = TRUE) + 1.96 * sd(Personal_Accomplishment, na.rm = TRUE) / sqrt(n()),
Depersonalization_Mean = mean(Depersonalization, na.rm = TRUE),
Depersonalization_SD = sd(Depersonalization, na.rm = TRUE),
Depersonalization_CI_Low = mean(Depersonalization, na.rm = TRUE) - 1.96 * sd(Depersonalization, na.rm = TRUE) / sqrt(n()),
Depersonalization_CI_High = mean(Depersonalization, na.rm = TRUE) + 1.96 * sd(Depersonalization, na.rm = TRUE) / sqrt(n())
)
library(tidyverse)
# Create a data frame for gtsummary
summary_table <- summary_data %>%
pivot_longer(cols = everything(), names_to = "Measure", values_to = "Value")
# Create the gtsummary table
burnout_summary <- summary_table %>%
tbl_summary(
by = NULL,  # No grouping
statistic = all_continuous() ~ "{value}",
missing = "no"
) %>%
modify_header(label = "**Burnout Measures**")
# Load gt package
library(gt)
# Create a simple table for pre-calculated summaries
burnout_summary <- summary_data %>%
t() %>%                            # Transpose the data for easier formatting
as.data.frame() %>%
rownames_to_column(var = "Measure") %>%
rename(Value = V1) %>%             # Rename the column for clarity
gt() %>%
tab_header(
title = "Burnout Measures Summary",
subtitle = "Mean, SD, and 95% Confidence Intervals"
) %>%
cols_label(
Measure = "**Burnout Measure**",
Value = "**Value**"
)
burnout_summary
# Create a summary table for the categorical burnout levels
categorical_summary <- data %>%
select(EE_Level, PA_Level, DP_Level) %>%  # Select the categorical variables
tbl_summary(
statistic = all_categorical() ~ "{n} ({p}%)",  # Show counts and percentages
missing = "ifany"                             # Display missing data if present
) %>%
modify_header(label = "**Burnout Levels**")      # Add a custom header for the table
categorical_summary
# Load required package
library(gt)
library(tidyverse)
# Ensure column names are properly sanitized and referenced
colnames(summary_df) <- make.names(colnames(summary_df))
# Create the summary table using gt
summary_gt <- summary_df %>%
gt() %>%
tab_header(
title = "Summary Table of Variables by High Burnout",
subtitle = "P-values for Categorical and Numeric Variables"
) %>%
cols_label(
Variable = "Variable",
Statistic_Type = "Statistic Type",
p.value = "P-value"
) %>%
fmt_number(
columns = vars(p.value),
decimals = 4
) %>%
tab_style(
style = cell_text(weight = "bold"),
locations = cells_body(
columns = vars(p.value),
rows = p.value < 0.05
)
) %>%
tab_footnote(
footnote = "Bold p-values indicate significance at p < 0.05.",
locations = cells_body(
columns = vars(p.value),
rows = p.value < 0.05
)
)
# Select demographic variables and High_Burnout for analysis
demographic_vars <- c("age", "gender", "work_hours", "qualification",
"dept", "marital_status", "location",
"work_location", "dengue_cases" )
# Create a summary table using tbl_summary
summary_table <- data %>%
select(all_of(demographic_vars), High_Burnout) %>%
tbl_summary(
by = High_Burnout, # Group by High_Burnout
missing = "ifany", # Include missing values if any
percent = "row"    # Show percentages within each row
) %>%
add_p() %>%          # Add p-values for comparisons
modify_header(label ~ "**Variable**") %>% # Rename the label column
bold_labels()        # Bold the variable names
# Display the table
summary_table
# Select demographic and numeric variables for analysis
variables <- c("age", "gender", "work_hours", "qualification", "dept",
"marital_status", "location", "work_location", "dengue_cases",
"Stress", "Anxiety", "Depression")
# Create a summary table using tbl_summary
summary_table <- data %>%
select(all_of(variables), High_Burnout) %>%
tbl_summary(
by = High_Burnout,          # Group by High_Burnout
missing = "ifany",          # Include missing values if any
statistic = list(
all_categorical() ~ "{n} ({p}%)",  # Frequency and percentage for categorical variables
all_continuous() ~ "{mean} ({sd})" # Mean and standard deviation for numeric variables
),
digits = all_continuous() ~ 2        # Format numeric variables to 2 decimal places
) %>%
add_p() %>%                           # Add p-values for comparisons
modify_header(label ~ "**Variable**") %>%  # Rename the label column
bold_labels()                          # Bold the variable names
# Display the table
summary_table
# Display the table
summary_table
names(data)
# Create High_Burnout variable
data$High_Burnout <- with(data, ifelse(
EE_Level == "High" & DP_Level == "High" & PA_Level == "Low",
"Yes",
"No"
))
# Check the distribution of High_Burnout
table(data$High_Burnout)
str(data)
# Demographic and psychological variables
demographic_vars <- c("gender", "qualification", "dept", "marital_status", "location")
psych_vars <- c("Stress_Level", "Anxiety_Level", "Depression_Level")
# Function to calculate percentages and p-values
analyze_burnout <- function(var) {
chisq_result <- chisq.test(table(data[[var]], data$High_Burnout))
summary_table <- prop.table(table(data[[var]], data$High_Burnout), margin = 1) * 100
data.frame(
Variable = var,
Level = rownames(summary_table),
No_Burnout_Percentage = round(summary_table[, "No"], 1),
High_Burnout_Percentage = round(summary_table[, "Yes"], 1),
p_value = round(chisq_result$p.value, 3)
)
}
# Apply the function to all variables
results <- lapply(c(demographic_vars, psych_vars), analyze_burnout)
# Required Libraries
library(dplyr)
library(knitr)
# Define demographic and psychological variables
demographic_vars <- c("gender", "qualification", "dept", "marital_status", "location")
psych_vars <- c("Stress_Level", "Anxiety_Level", "Depression_Level")
# Function to analyze burnout
analyze_burnout <- function(var) {
# Ensure no missing values in the variable or High_Burnout
valid_data <- data[!is.na(data[[var]]) & !is.na(data$High_Burnout), ]
# Create contingency table
contingency_table <- table(valid_data[[var]], valid_data$High_Burnout)
# Check if chi-square approximation is valid
if (any(contingency_table < 5)) {
# Use Fisher's Exact Test for small cell counts
test_result <- fisher.test(contingency_table)
} else {
# Use Chi-Square Test otherwise
test_result <- chisq.test(contingency_table)
}
# Calculate percentages
summary_table <- prop.table(contingency_table, margin = 1) * 100
# Return results as a data frame
data.frame(
Variable = var,
Level = rownames(summary_table),
No_Burnout_Percentage = round(summary_table[, "No"], 1),
High_Burnout_Percentage = round(summary_table[, "Yes"], 1),
p_value = round(test_result$p.value, 3)
)
}
#### Apply the function to all variables ######
results <- lapply(c(demographic_vars, psych_vars), analyze_burnout)
# Combine results
final_table <- do.call(rbind, results)
# Check if all variables exist in the dataset
all_vars <- c(demographic_vars, psych_vars, "High_Burnout")
missing_vars <- all_vars[!all_vars %in% colnames(data)]
if (length(missing_vars) > 0) {
print(paste("These variables are missing from the dataset:", paste(missing_vars, collapse = ", ")))
} else {
print("All variables are present.")
}
names(data)
# Load required libraries
library(gtsummary)
library(dplyr)
# Select the required variables
selected_vars <- c(
"age", "gender", "work_hours", "qualification",
"dept", "marital_status", "location", "work_location",
"dengue_cases", "Stress", "Anxiety", "Depression",
"EE_Level", "PA_Level", "DP_Level", "High_Burnout"
)
# Filter the dataset to include only the selected variables
data_selected <- data %>% select(all_of(selected_vars))
# Create the gtsummary table
summary_table <- tbl_summary(
data_selected,
by = "High_Burnout", # Group by High_Burnout (Yes/No)
statistic = list(
all_continuous() ~ "{mean} ({sd})", # Mean and SD for continuous variables
all_categorical() ~ "{n} ({p}%)"    # Count and percentage for categorical variables
),
missing_text = "Missing" # Label for missing values
)
# Add p-values for comparisons
summary_table <- summary_table %>%
add_p() %>%               # Add p-values for statistical tests
add_overall() %>%         # Add overall summary
bold_labels()             # Bold variable labels
# Print the gtsummary table
summary_table
# Load necessary libraries
library(dplyr)
library(broom)
# Ensure High_Burnout is a factor
data$High_Burnout <- as.factor(data$High_Burnout)
# Fit a logistic regression model
model <- glm(
High_Burnout ~ age + gender + work_hours + qualification +
dept + marital_status + location + work_location + dengue_cases +
Stress + Anxiety + Depression + EE_Level + PA_Level + DP_Level,
data = data,
family = binomial
)
# Display model summary
summary(model)
# Create a tidy output of regression results
tidy_model <- tidy(model, exponentiate = TRUE, conf.int = TRUE)
print(tidy_model)
# Calculate pseudo R-squared
library(pscl)
# Calculate pseudo R-squared
install.packages("pscl")
library(pscl)
pseudo_r2 <- pR2(model)
print(pseudo_r2)
table(data$High_Burnout)
library(ggplot2)
# Bar plot for Gender and High Burnout
ggplot(data, aes(x = gender, fill = High_Burnout)) +
geom_bar(position = "fill") +  # Stacked bar as proportions
labs(
title = "High Burnout Distribution by Gender",
x = "Gender",
y = "Proportion",
fill = "Burnout"
) +
scale_y_continuous(labels = scales::percent) +
theme_minimal()
# Bar plot for Department and High Burnout
ggplot(data, aes(x = dept, fill = High_Burnout)) +
geom_bar(position = "fill") +
labs(
title = "High Burnout Distribution by Department",
x = "Department",
y = "Proportion",
fill = "Burnout"
) +
scale_y_continuous(labels = scales::percent) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels
theme_minimal()
# Box plot for Stress by High Burnout
ggplot(data, aes(x = High_Burnout, y = Stress, fill = High_Burnout)) +
geom_boxplot() +
labs(
title = "Stress Levels by Burnout",
x = "High Burnout",
y = "Stress"
) +
theme_minimal()
# Box plot for Depression by High Burnout
ggplot(data, aes(x = High_Burnout, y = Depression, fill = High_Burnout)) +
geom_boxplot() +
labs(
title = "Depression Levels by Burnout",
x = "High Burnout",
y = "Depression"
) +
theme_minimal()
# Stacked bar plot for Emotional Exhaustion levels
ggplot(data, aes(x = EE_Level, fill = High_Burnout)) +
geom_bar(position = "fill") +
labs(
title = "High Burnout Proportion by Emotional Exhaustion Level",
x = "Emotional Exhaustion Level",
y = "Proportion",
fill = "Burnout"
) +
scale_y_continuous(labels = scales::percent) +
theme_minimal()
# Stacked bar plot for Depersonalization levels
ggplot(data, aes(x = DP_Level, fill = High_Burnout)) +
geom_bar(position = "fill") +
labs(
title = "High Burnout Proportion by Depersonalization Level",
x = "Depersonalization Level",
y = "Proportion",
fill = "Burnout"
) +
scale_y_continuous(labels = scales::percent) +
theme_minimal()
# Histogram for Stress
ggplot(data, aes(x = Stress, fill = High_Burnout)) +
geom_histogram(binwidth = 5, alpha = 0.7, position = "identity") +
labs(
title = "Distribution of Stress by Burnout",
x = "Stress",
y = "Count",
fill = "Burnout"
) +
theme_minimal()
# Histogram for Anxiety
ggplot(data, aes(x = Anxiety, fill = High_Burnout)) +
geom_histogram(binwidth = 5, alpha = 0.7, position = "identity") +
labs(
title = "Distribution of Anxiety by Burnout",
x = "Anxiety",
y = "Count",
fill = "Burnout"
) +
theme_minimal()
# Heatmap
ggplot(heatmap_data, aes(x = EE_Level, y = DP_Level, fill = Proportion)) +
geom_tile() +
labs(
title = "Heatmap of Burnout Levels (EE vs. DP)",
x = "Emotional Exhaustion Level",
y = "Depersonalization Level",
fill = "Proportion"
) +
scale_fill_gradient(low = "white", high = "blue") +
theme_minimal()
# Data for heatmap
heatmap_data <- data %>%
group_by(EE_Level, DP_Level) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Proportion = Count / sum(Count))
# Heatmap
ggplot(heatmap_data, aes(x = EE_Level, y = DP_Level, fill = Proportion)) +
geom_tile() +
labs(
title = "Heatmap of Burnout Levels (EE vs. DP)",
x = "Emotional Exhaustion Level",
y = "Depersonalization Level",
fill = "Proportion"
) +
scale_fill_gradient(low = "white", high = "blue") +
theme_minimal()
# Histogram for Anxiety
ggplot(data, aes(x = Anxiety, fill = High_Burnout)) +
geom_histogram(binwidth = 5, alpha = 0.7, position = "identity") +
labs(
title = "Distribution of Anxiety by Burnout",
x = "Anxiety",
y = "Count",
fill = "Burnout"
) +
theme_minimal()
# Data for heatmap
heatmap_data <- data %>%
group_by(EE_Level, DP_Level) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Proportion = Count / sum(Count))
# Heatmap
ggplot(heatmap_data, aes(x = EE_Level, y = DP_Level, fill = Proportion)) +
geom_tile() +
labs(
title = "Heatmap of Burnout Levels (EE vs. DP)",
x = "Emotional Exhaustion Level",
y = "Depersonalization Level",
fill = "Proportion"
) +
scale_fill_gradient(low = "white", high = "blue") +
theme_minimal()
# Scatter plot for Stress vs. Depression
ggplot(data, aes(x = Stress, y = Depression, color = High_Burnout)) +
geom_point(alpha = 0.7) +
labs(
title = "Stress vs. Depression by Burnout",
x = "Stress",
y = "Depression",
color = "Burnout"
) +
theme_minimal()
# Scatter plot for Anxiety vs. Stress
ggplot(data, aes(x = Anxiety, y = Stress, color = High_Burnout)) +
geom_point(alpha = 0.7) +
labs(
title = "Anxiety vs. Stress by Burnout",
x = "Anxiety",
y = "Stress",
color = "Burnout"
) +
theme_minimal()
View(burnout_summary)
View(categorical_summary)
library(gtsummary)
library(dplyr)
# Example descriptive table
tbl_summary(data,
by = gender,  # Group results by gender (or any other grouping variable)
statistic = list(all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} ({p}%)"),
missing = "no") %>%  # Exclude missing values
add_p() %>%               # Add p-values for comparisons
add_overall() %>%         # Include overall summary column
bold_labels()             # Bold variable labels
View(data_dengue)
